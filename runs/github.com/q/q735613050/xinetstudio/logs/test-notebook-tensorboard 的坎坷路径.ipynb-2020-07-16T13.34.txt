[I 200716 13:35:10 inrepo:36] Testing notebook tensorboard 的坎坷路径.ipynb
[I 200716 13:35:11 inrepo:45] Found kernel python3
[I 200716 13:35:11 execute:404] Executing notebook with kernel: python3
Traceback (most recent call last):
  File "/src/inrepo.py", line 114, in <module>
    main()
  File "/src/inrepo.py", line 110, in main
    test_f(opts.test, opts.output_dir)
  File "/src/inrepo.py", line 75, in run_notebook
    nb, cwd=os.path.dirname(nb_path), kernel_name=kernel_name, timeout=600
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 737, in executenb
    return ep.preprocess(nb, resources, km=km)[0]
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 405, in preprocess
    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/base.py", line 69, in preprocess
    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 448, in preprocess_cell
    raise CellExecutionError.from_cell_and_msg(cell, out)
nbconvert.preprocessors.execute.CellExecutionError: An error occurred while executing the following cell:
------------------
import tensorflow as tf

g = tf.Graph()  # 创建一个Graph对象

with g.as_default():   # 将 Graph对象 设为默认 Graph对象
    with tf.name_scope('variables'):
        # 记录数据流图运行次数的 Variable 对象
        # 这是一种常见的范式，在整个API中，这种范式会频繁出现
        global_step = tf.Variable(0, dtype= tf.float32, trainable= False, name= 'global_step')
        
        # 追踪该模型的所有输出随时间的累加和的 Variable 对象
        total_output = tf.Variable(0.0, dtype= tf.float32, trainable= False, name= 'total_output')
        
        
    with tf.name_scope('transformation'):  # 该模型的核心变换部分
        
        # 独立的输入层
        with tf.name_scope('input'):
            # 创建输出占位符，用于接收任意长度的向量
            a = tf.placeholder(tf.float32, shape= [None], name= 'input_placeholder_a')
            
        # 独立的中间层
        with tf.name_scope('intermediate_layer'):
            # 对整个向量实施乘法和加法
            b = tf.reduce_prod(a, name= 'prod_b')
            c = tf.reduce_sum(a, name= 'sum_c')
            
        # 独立的输出层
        with tf.name_scope('output'):
            output = tf.add(b, c, name= 'output')
        
        # 对变量进行更新
        with tf.name_scope('update'):
            # 用最新的输出更新Variable对象total_output
            update_total = total_output.assign(output)
            # 将Variable对象global_step增 1 ，只要数据流图运行，该操作便需要进行
            increment_step = global_step.assign_add(1)
            
        with tf.name_scope('summaries'):
            avg = tf.div(update_total, tf.cast(increment_step, tf.float32), name= 'average')
            
            # 为输出节点创建汇总数据
            tf.summary.scalar('Output', output)
            tf.summary.scalar('Sum of outputs over time', update_total)
            tf.summary.scalar('Average of outputs over time', avg)
            
        with tf.name_scope('global_ops'):
            # 初始化Op
            init = tf.global_variables_initializer()
            # 将所有汇总数据合并到一个Op中
            merged_summaries = tf.summary.merge_all()
            
sess = tf.Session(graph= g)
# 保存汇总数据
writer = tf.summary.FileWriter('E:/Graphs/xin_graph', g)
sess.run(init)
def run_graph(input_tensor):
    '''
    运行计算图
    '''
    feed_dict = {a: input_tensor}
    _, step, summary = sess.run([output, increment_step, merged_summaries],feed_dict= feed_dict)

    writer.add_summary(summary, global_step= step)
# 用不同的输入运行该数据流图
run_graph([2, 8])
run_graph([3, 1, 3, 3])
run_graph([8])
run_graph([1, 2, 3])
run_graph([11, 4])
run_graph([4, 1])
run_graph([7, 3, 1])
run_graph([6, 3])
run_graph([0, 2])
run_graph([4, 5 ,6])

writer.flush()      # 将汇总数据写入磁盘
writer.close()
sess.close()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-e051fbcac413>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0;32mimport[0m [0mtensorflow[0m [0;32mas[0m [0mtf[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;34m[0m[0m
[1;32m      3[0m [0mg[0m [0;34m=[0m [0mtf[0m[0;34m.[0m[0mGraph[0m[0;34m([0m[0;34m)[0m  [0;31m# 创建一个Graph对象[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0;32mwith[0m [0mg[0m[0;34m.[0m[0mas_default[0m[0;34m([0m[0;34m)[0m[0;34m:[0m   [0;31m# 将 Graph对象 设为默认 Graph对象[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'tensorflow'
ModuleNotFoundError: No module named 'tensorflow'


Container exited with status: {'Error': None, 'StatusCode': 1}
