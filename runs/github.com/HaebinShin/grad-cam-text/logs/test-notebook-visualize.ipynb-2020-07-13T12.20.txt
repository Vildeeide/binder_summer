[I 200713 12:22:20 inrepo:36] Testing notebook visualize.ipynb
[I 200713 12:22:20 inrepo:45] Found kernel python3
[I 200713 12:22:21 execute:404] Executing notebook with kernel: python3
Traceback (most recent call last):
  File "/src/inrepo.py", line 114, in <module>
    main()
  File "/src/inrepo.py", line 110, in main
    test_f(opts.test, opts.output_dir)
  File "/src/inrepo.py", line 75, in run_notebook
    nb, cwd=os.path.dirname(nb_path), kernel_name=kernel_name, timeout=600
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 737, in executenb
    return ep.preprocess(nb, resources, km=km)[0]
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 405, in preprocess
    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/base.py", line 69, in preprocess
    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 448, in preprocess_cell
    raise CellExecutionError.from_cell_and_msg(cell, out)
nbconvert.preprocessors.execute.CellExecutionError: An error occurred while executing the following cell:
------------------
import tensorflow as tf
import os
os.environ['CUDA_VISIBLE_DEVICES'] = '-1'
from model import Model
from dataset import *

import matplotlib.pyplot as plt
%matplotlib inline

# plt.rcParams['font.family']='NanumGothicCoding'
# global font setting
# if not working, remove matplotlib cache file (rm -rf /root/.cache/matplotlib/*)

def _plot_score(vec, pred_text, xticks):
    _axis_fontsize=13
    fig=plt.figure(figsize = (14,10))
    plt.yticks([])
    plt.xticks(range(0,len(vec)), xticks, fontsize=_axis_fontsize)
    fig.add_subplot(1, 1, 1)
    plt.figtext(x=0.13, y=0.54, s='Prediction: {}'.format(pred_text), fontsize=15, fontname='sans-serif')
    img = plt.imshow([vec], vmin=0, vmax=1)
    plt.show()
    
def _get_text_xticks(sentence):
    tokens = [word_.strip() for word_ in sentence.split(' ')]
    return tokens

def visualize_gradcam_text(sentences, checkpoint_path, max_article_length):
    
    config = tf.ConfigProto()
    config.gpu_options.allow_growth = True
    
    model = Model()
    classifier = tf.estimator.Estimator(model_fn=model.build,
                                        config=tf.estimator.RunConfig(session_config=config),
                                        params={
                                            'feature_columns': [tf.feature_column.numeric_column(key='x')], \
                                            'kernels': [(3,512),(4,512),(5,512)], \
                                            'num_classes': 2, \
                                            'max_article_length': max_article_length
    })
    
    data = SST(Word2vecEnWordEmbedder)
    pred_val = classifier.predict(input_fn=lambda: data.predict_input_fn(sentences, padded_size=MAX_ARTICLE_LENGTH),
                                  checkpoint_path=checkpoint_path)
    for i, _val in enumerate(pred_val):
        pred_idx = _val['predict_index'][0]
        vec = _val['grad_cam'][pred_idx][:17]
        pred_text = "Negative" if pred_idx==0 else "Positive"
        _plot_score(vec=vec, pred_text=pred_text, xticks=_get_text_xticks(sentences[i]))

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-31b858c6d0f4>[0m in [0;36m<module>[0;34m[0m
[1;32m      2[0m [0;32mimport[0m [0mos[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0mos[0m[0;34m.[0m[0menviron[0m[0;34m[[0m[0;34m'CUDA_VISIBLE_DEVICES'[0m[0;34m][0m [0;34m=[0m [0;34m'-1'[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mfrom[0m [0mmodel[0m [0;32mimport[0m [0mModel[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0;32mfrom[0m [0mdataset[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0;34m[0m[0m
[1;32m      6[0m [0;34m[0m[0m

[0;32m~/model.py[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mtensorflow[0m [0;32mas[0m [0mtf[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0;32mfrom[0m [0mtensorflow[0m[0;34m.[0m[0mcontrib[0m[0;34m.[0m[0mlayers[0m [0;32mimport[0m [0mxavier_initializer[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0;32mclass[0m [0mModel[0m[0;34m([0m[0mobject[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m     def build(self,

[0;31mModuleNotFoundError[0m: No module named 'tensorflow.contrib'
ModuleNotFoundError: No module named 'tensorflow.contrib'


Container exited with status: {'Error': None, 'StatusCode': 1}
