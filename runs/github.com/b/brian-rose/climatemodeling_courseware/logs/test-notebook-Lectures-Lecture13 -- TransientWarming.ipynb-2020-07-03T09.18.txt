[I 200703 09:25:57 inrepo:35] Testing notebook Lectures/Lecture13 -- TransientWarming.ipynb
[I 200703 09:25:58 execute:404] Executing notebook with kernel: python3
syntax error, unexpected $end, expecting SCAN_ATTR or SCAN_DATASET or SCAN_ERROR
context: ^
Traceback (most recent call last):
  File "/src/inrepo.py", line 76, in <module>
    main()
  File "/src/inrepo.py", line 72, in main
    test_f(opts.test, opts.output_dir)
  File "/src/inrepo.py", line 38, in run_notebook
    exported = executenb(nb, cwd=os.path.dirname(nb_path))
  File "/srv/conda/envs/notebook/lib/python3.8/site-packages/nbconvert/preprocessors/execute.py", line 737, in executenb
    return ep.preprocess(nb, resources, km=km)[0]
  File "/srv/conda/envs/notebook/lib/python3.8/site-packages/nbconvert/preprocessors/execute.py", line 405, in preprocess
    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)
  File "/srv/conda/envs/notebook/lib/python3.8/site-packages/nbconvert/preprocessors/base.py", line 69, in preprocess
    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)
  File "/srv/conda/envs/notebook/lib/python3.8/site-packages/nbconvert/preprocessors/execute.py", line 448, in preprocess_cell
    raise CellExecutionError.from_cell_and_msg(cell, out)
nbconvert.preprocessors.execute.CellExecutionError: An error occurred while executing the following cell:
------------------
#  Get the water vapor data
#datapath = "http://ramadda.atmos.albany.edu:8080/repository/opendap/latest/Top/Users/BrianRose/CESM_runs/"
datapath = "http://thredds.atmos.albany.edu:8080/thredds/dodsC/cesm/"
#endstr = "/entry.das"
atm_control = xr.open_dataset( datapath + 'som_1850_f19/som_1850_f19.cam.h0.clim.nc', decode_times=False)
Qglobal = ((atm_control.Q * atm_control.gw)/atm_control.gw.mean(dim='lat')).mean(dim=('lat','lon','time'))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/xarray/backends/file_manager.py[0m in [0;36m_acquire_with_cache_info[0;34m(self, needs_lock)[0m
[1;32m    197[0m             [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 198[0;31m                 [0mfile[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_cache[0m[0;34m[[0m[0mself[0m[0;34m.[0m[0m_key[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    199[0m             [0;32mexcept[0m [0mKeyError[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/xarray/backends/lru_cache.py[0m in [0;36m__getitem__[0;34m(self, key)[0m
[1;32m     52[0m         [0;32mwith[0m [0mself[0m[0;34m.[0m[0m_lock[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 53[0;31m             [0mvalue[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_cache[0m[0;34m[[0m[0mkey[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     54[0m             [0mself[0m[0;34m.[0m[0m_cache[0m[0;34m.[0m[0mmove_to_end[0m[0;34m([0m[0mkey[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mKeyError[0m: [<class 'netCDF4._netCDF4.Dataset'>, ('http://thredds.atmos.albany.edu:8080/thredds/dodsC/cesm/som_1850_f19/som_1850_f19.cam.h0.clim.nc',), 'r', (('clobber', True), ('diskless', False), ('format', 'NETCDF4'), ('persist', False))]

During handling of the above exception, another exception occurred:

[0;31mOSError[0m                                   Traceback (most recent call last)
[0;32m<ipython-input-2-a00cfe2213dd>[0m in [0;36m<module>[0;34m[0m
[1;32m      3[0m [0mdatapath[0m [0;34m=[0m [0;34m"http://thredds.atmos.albany.edu:8080/thredds/dodsC/cesm/"[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0;31m#endstr = "/entry.das"[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0matm_control[0m [0;34m=[0m [0mxr[0m[0;34m.[0m[0mopen_dataset[0m[0;34m([0m [0mdatapath[0m [0;34m+[0m [0;34m'som_1850_f19/som_1850_f19.cam.h0.clim.nc'[0m[0;34m,[0m [0mdecode_times[0m[0;34m=[0m[0;32mFalse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0mQglobal[0m [0;34m=[0m [0;34m([0m[0;34m([0m[0matm_control[0m[0;34m.[0m[0mQ[0m [0;34m*[0m [0matm_control[0m[0;34m.[0m[0mgw[0m[0;34m)[0m[0;34m/[0m[0matm_control[0m[0;34m.[0m[0mgw[0m[0;34m.[0m[0mmean[0m[0;34m([0m[0mdim[0m[0;34m=[0m[0;34m'lat'[0m[0;34m)[0m[0;34m)[0m[0;34m.[0m[0mmean[0m[0;34m([0m[0mdim[0m[0;34m=[0m[0;34m([0m[0;34m'lat'[0m[0;34m,[0m[0;34m'lon'[0m[0;34m,[0m[0;34m'time'[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/xarray/backends/api.py[0m in [0;36mopen_dataset[0;34m(filename_or_obj, group, decode_cf, mask_and_scale, decode_times, autoclose, concat_characters, decode_coords, engine, chunks, lock, cache, drop_variables, backend_kwargs, use_cftime)[0m
[1;32m    499[0m             [0mengine[0m [0;34m=[0m [0m_get_default_engine[0m[0;34m([0m[0mfilename_or_obj[0m[0;34m,[0m [0mallow_remote[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    500[0m         [0;32mif[0m [0mengine[0m [0;34m==[0m [0;34m"netcdf4"[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 501[0;31m             store = backends.NetCDF4DataStore.open(
[0m[1;32m    502[0m                 [0mfilename_or_obj[0m[0;34m,[0m [0mgroup[0m[0;34m=[0m[0mgroup[0m[0;34m,[0m [0mlock[0m[0;34m=[0m[0mlock[0m[0;34m,[0m [0;34m**[0m[0mbackend_kwargs[0m[0;34m[0m[0;34m[0m[0m
[1;32m    503[0m             )

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/xarray/backends/netCDF4_.py[0m in [0;36mopen[0;34m(cls, filename, mode, format, group, clobber, diskless, persist, lock, lock_maker, autoclose)[0m
[1;32m    356[0m             [0mnetCDF4[0m[0;34m.[0m[0mDataset[0m[0;34m,[0m [0mfilename[0m[0;34m,[0m [0mmode[0m[0;34m=[0m[0mmode[0m[0;34m,[0m [0mkwargs[0m[0;34m=[0m[0mkwargs[0m[0;34m[0m[0;34m[0m[0m
[1;32m    357[0m         )
[0;32m--> 358[0;31m         [0;32mreturn[0m [0mcls[0m[0;34m([0m[0mmanager[0m[0;34m,[0m [0mgroup[0m[0;34m=[0m[0mgroup[0m[0;34m,[0m [0mmode[0m[0;34m=[0m[0mmode[0m[0;34m,[0m [0mlock[0m[0;34m=[0m[0mlock[0m[0;34m,[0m [0mautoclose[0m[0;34m=[0m[0mautoclose[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    359[0m [0;34m[0m[0m
[1;32m    360[0m     [0;32mdef[0m [0m_acquire[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mneeds_lock[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/xarray/backends/netCDF4_.py[0m in [0;36m__init__[0;34m(self, manager, group, mode, lock, autoclose)[0m
[1;32m    312[0m         [0mself[0m[0;34m.[0m[0m_group[0m [0;34m=[0m [0mgroup[0m[0;34m[0m[0;34m[0m[0m
[1;32m    313[0m         [0mself[0m[0;34m.[0m[0m_mode[0m [0;34m=[0m [0mmode[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 314[0;31m         [0mself[0m[0;34m.[0m[0mformat[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mds[0m[0;34m.[0m[0mdata_model[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    315[0m         [0mself[0m[0;34m.[0m[0m_filename[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mds[0m[0;34m.[0m[0mfilepath[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    316[0m         [0mself[0m[0;34m.[0m[0mis_remote[0m [0;34m=[0m [0mis_remote_uri[0m[0;34m([0m[0mself[0m[0;34m.[0m[0m_filename[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/xarray/backends/netCDF4_.py[0m in [0;36mds[0;34m(self)[0m
[1;32m    365[0m     [0;34m@[0m[0mproperty[0m[0;34m[0m[0;34m[0m[0m
[1;32m    366[0m     [0;32mdef[0m [0mds[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 367[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_acquire[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    368[0m [0;34m[0m[0m
[1;32m    369[0m     [0;32mdef[0m [0mopen_store_variable[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mname[0m[0;34m,[0m [0mvar[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/xarray/backends/netCDF4_.py[0m in [0;36m_acquire[0;34m(self, needs_lock)[0m
[1;32m    359[0m [0;34m[0m[0m
[1;32m    360[0m     [0;32mdef[0m [0m_acquire[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mneeds_lock[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 361[0;31m         [0;32mwith[0m [0mself[0m[0;34m.[0m[0m_manager[0m[0;34m.[0m[0macquire_context[0m[0;34m([0m[0mneeds_lock[0m[0;34m)[0m [0;32mas[0m [0mroot[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    362[0m             [0mds[0m [0;34m=[0m [0m_nc4_require_group[0m[0;34m([0m[0mroot[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0m_group[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0m_mode[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    363[0m         [0;32mreturn[0m [0mds[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/contextlib.py[0m in [0;36m__enter__[0;34m(self)[0m
[1;32m    111[0m         [0;32mdel[0m [0mself[0m[0;34m.[0m[0margs[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0mkwds[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0mfunc[0m[0;34m[0m[0;34m[0m[0m
[1;32m    112[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 113[0;31m             [0;32mreturn[0m [0mnext[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mgen[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    114[0m         [0;32mexcept[0m [0mStopIteration[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    115[0m             [0;32mraise[0m [0mRuntimeError[0m[0;34m([0m[0;34m"generator didn't yield"[0m[0;34m)[0m [0;32mfrom[0m [0;32mNone[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/xarray/backends/file_manager.py[0m in [0;36macquire_context[0;34m(self, needs_lock)[0m
[1;32m    184[0m     [0;32mdef[0m [0macquire_context[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mneeds_lock[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    185[0m         [0;34m"""Context manager for acquiring a file."""[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 186[0;31m         [0mfile[0m[0;34m,[0m [0mcached[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_acquire_with_cache_info[0m[0;34m([0m[0mneeds_lock[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    187[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    188[0m             [0;32myield[0m [0mfile[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.8/site-packages/xarray/backends/file_manager.py[0m in [0;36m_acquire_with_cache_info[0;34m(self, needs_lock)[0m
[1;32m    202[0m                     [0mkwargs[0m [0;34m=[0m [0mkwargs[0m[0;34m.[0m[0mcopy[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    203[0m                     [0mkwargs[0m[0;34m[[0m[0;34m"mode"[0m[0;34m][0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_mode[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 204[0;31m                 [0mfile[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_opener[0m[0;34m([0m[0;34m*[0m[0mself[0m[0;34m.[0m[0m_args[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    205[0m                 [0;32mif[0m [0mself[0m[0;34m.[0m[0m_mode[0m [0;34m==[0m [0;34m"w"[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    206[0m                     [0;31m# ensure file doesn't get overriden when opened again[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32mnetCDF4/_netCDF4.pyx[0m in [0;36mnetCDF4._netCDF4.Dataset.__init__[0;34m()[0m

[0;32mnetCDF4/_netCDF4.pyx[0m in [0;36mnetCDF4._netCDF4._ensure_nc_success[0;34m()[0m

[0;31mOSError[0m: [Errno -72] NetCDF: Malformed or inaccessible DAP2 DDS or DAP4 DMR response: b'http://thredds.atmos.albany.edu:8080/thredds/dodsC/cesm/som_1850_f19/som_1850_f19.cam.h0.clim.nc'
OSError: [Errno -72] NetCDF: Malformed or inaccessible DAP2 DDS or DAP4 DMR response: b'http://thredds.atmos.albany.edu:8080/thredds/dodsC/cesm/som_1850_f19/som_1850_f19.cam.h0.clim.nc'


Container exited with status: {'Error': None, 'StatusCode': 1}
