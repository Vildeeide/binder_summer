[I 200712 16:03:17 inrepo:36] Testing notebook generate-random-bbn.ipynb
[W 200712 16:03:17 inrepo:48] No such kernel ds, falling back on kernel language=python
[W 200712 16:03:17 inrepo:60] Using kernel python3 to provide language: python
[I 200712 16:03:18 execute:404] Executing notebook with kernel: python3
Traceback (most recent call last):
  File "/src/inrepo.py", line 114, in <module>
    main()
  File "/src/inrepo.py", line 110, in main
    test_f(opts.test, opts.output_dir)
  File "/src/inrepo.py", line 75, in run_notebook
    nb, cwd=os.path.dirname(nb_path), kernel_name=kernel_name, timeout=600
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 737, in executenb
    return ep.preprocess(nb, resources, km=km)[0]
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 405, in preprocess
    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/base.py", line 69, in preprocess
    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 448, in preprocess_cell
    raise CellExecutionError.from_cell_and_msg(cell, out)
nbconvert.preprocessors.execute.CellExecutionError: An error occurred while executing the following cell:
------------------
s_json = to_json(s, s_params)
print(s_json)
with open('singly-connected.json', 'w') as fhandle:
    fhandle.write(to_json(s, s_params, pretty=True))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-8-f2f73b3aaa1f>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0ms_json[0m [0;34m=[0m [0mto_json[0m[0;34m([0m[0ms[0m[0;34m,[0m [0ms_params[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0mprint[0m[0;34m([0m[0ms_json[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mwith[0m [0mopen[0m[0;34m([0m[0;34m'singly-connected.json'[0m[0;34m,[0m [0;34m'w'[0m[0;34m)[0m [0;32mas[0m [0mfhandle[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m     [0mfhandle[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0mto_json[0m[0;34m([0m[0ms[0m[0;34m,[0m [0ms_params[0m[0;34m,[0m [0mpretty[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m<ipython-input-7-a8507f826487>[0m in [0;36mto_json[0;34m(g, params, pretty)[0m
[1;32m      5[0m     [0mj[0m[0;34m[[0m[0;34m'edges'[0m[0;34m][0m [0;34m=[0m [0;34m[[0m[0;34m{[0m[0;34m'pa'[0m[0;34m:[0m [0me[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m,[0m [0;34m'ch'[0m[0;34m:[0m [0me[0m[0;34m[[0m[0;36m1[0m[0;34m][0m[0;34m}[0m [0;32mfor[0m [0me[0m [0;32min[0m [0mg[0m[0;34m.[0m[0medges[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m      6[0m     [0mj[0m[0;34m[[0m[0;34m'parameters'[0m[0;34m][0m [0;34m=[0m [0;34m[[0m[0;34m{[0m[0;34m'node'[0m[0;34m:[0m [0mk[0m[0;34m,[0m [0;34m'params'[0m[0;34m:[0m [0mlist[0m[0;34m([0m[0mv[0m[0;34m[[0m[0;34m'params'[0m[0;34m][0m[0;34m.[0m[0mflatten[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m,[0m [0;34m'shape'[0m[0;34m:[0m [0mv[0m[0;34m[[0m[0;34m'shape'[0m[0;34m][0m [0;34m}[0m [0;32mfor[0m [0mk[0m[0;34m,[0m [0mv[0m [0;32min[0m [0mparams[0m[0;34m.[0m[0mitems[0m[0;34m([0m[0;34m)[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 7[0;31m     [0;32mreturn[0m [0mjson[0m[0;34m.[0m[0mdumps[0m[0;34m([0m[0mj[0m[0;34m,[0m [0mindent[0m[0;34m=[0m[0;36m2[0m[0;34m,[0m [0msort_keys[0m[0;34m=[0m[0;32mFalse[0m[0;34m)[0m [0;32mif[0m [0mpretty[0m [0;32mis[0m [0;32mTrue[0m [0;32melse[0m [0mjson[0m[0;34m.[0m[0mdumps[0m[0;34m([0m[0mj[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m/srv/conda/envs/notebook/lib/python3.7/json/__init__.py[0m in [0;36mdumps[0;34m(obj, skipkeys, ensure_ascii, check_circular, allow_nan, cls, indent, separators, default, sort_keys, **kw)[0m
[1;32m    229[0m         [0mcls[0m [0;32mis[0m [0;32mNone[0m [0;32mand[0m [0mindent[0m [0;32mis[0m [0;32mNone[0m [0;32mand[0m [0mseparators[0m [0;32mis[0m [0;32mNone[0m [0;32mand[0m[0;34m[0m[0;34m[0m[0m
[1;32m    230[0m         default is None and not sort_keys and not kw):
[0;32m--> 231[0;31m         [0;32mreturn[0m [0m_default_encoder[0m[0;34m.[0m[0mencode[0m[0;34m([0m[0mobj[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    232[0m     [0;32mif[0m [0mcls[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    233[0m         [0mcls[0m [0;34m=[0m [0mJSONEncoder[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.7/json/encoder.py[0m in [0;36mencode[0;34m(self, o)[0m
[1;32m    197[0m         [0;31m# exceptions aren't as detailed.  The list call should be roughly[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    198[0m         [0;31m# equivalent to the PySequence_Fast that ''.join() would do.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 199[0;31m         [0mchunks[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0miterencode[0m[0;34m([0m[0mo[0m[0;34m,[0m [0m_one_shot[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    200[0m         [0;32mif[0m [0;32mnot[0m [0misinstance[0m[0;34m([0m[0mchunks[0m[0;34m,[0m [0;34m([0m[0mlist[0m[0;34m,[0m [0mtuple[0m[0;34m)[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    201[0m             [0mchunks[0m [0;34m=[0m [0mlist[0m[0;34m([0m[0mchunks[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.7/json/encoder.py[0m in [0;36miterencode[0;34m(self, o, _one_shot)[0m
[1;32m    255[0m                 [0mself[0m[0;34m.[0m[0mkey_separator[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0mitem_separator[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0msort_keys[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    256[0m                 self.skipkeys, _one_shot)
[0;32m--> 257[0;31m         [0;32mreturn[0m [0m_iterencode[0m[0;34m([0m[0mo[0m[0;34m,[0m [0;36m0[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    258[0m [0;34m[0m[0m
[1;32m    259[0m def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,

[0;32m/srv/conda/envs/notebook/lib/python3.7/json/encoder.py[0m in [0;36mdefault[0;34m(self, o)[0m
[1;32m    177[0m [0;34m[0m[0m
[1;32m    178[0m         """
[0;32m--> 179[0;31m         raise TypeError(f'Object of type {o.__class__.__name__} '
[0m[1;32m    180[0m                         f'is not JSON serializable')
[1;32m    181[0m [0;34m[0m[0m

[0;31mTypeError[0m: Object of type int64 is not JSON serializable
TypeError: Object of type int64 is not JSON serializable


Container exited with status: {'Error': None, 'StatusCode': 1}
