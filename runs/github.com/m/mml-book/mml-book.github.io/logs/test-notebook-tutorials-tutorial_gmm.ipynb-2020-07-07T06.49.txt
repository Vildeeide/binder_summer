[I 200707 06:50:51 inrepo:35] Testing notebook tutorials/tutorial_gmm.ipynb
[I 200707 06:50:52 execute:404] Executing notebook with kernel: python3
Traceback (most recent call last):
  File "/src/inrepo.py", line 76, in <module>
    main()
  File "/src/inrepo.py", line 72, in main
    test_f(opts.test, opts.output_dir)
  File "/src/inrepo.py", line 38, in run_notebook
    exported = executenb(nb, cwd=os.path.dirname(nb_path))
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 737, in executenb
    return ep.preprocess(nb, resources, km=km)[0]
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 405, in preprocess
    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/base.py", line 69, in preprocess
    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 448, in preprocess_cell
    raise CellExecutionError.from_cell_and_msg(cell, out)
nbconvert.preprocessors.execute.CellExecutionError: An error occurred while executing the following cell:
------------------
#EDIT THIS FUNCTION
r = np.zeros((K,N)) # will store the responsibilities

for em_iter in range(100):    
    means_old = means.copy()
    
    # E-step: update responsibilities
    r = np.zeros((K,N)) #<-- REPLACE THIS LINE
        
    # M-step
    N_k = np.sum(r, axis=1)

    for k in range(K): 
        # update the means
        means[k] = 0 #<-- REPLACE THIS LINE
        
        # update the covariances
        covs[k] = 0  #<-- REPLACE THIS LINE
        
    # weights
    weights = np.zeros((K,)) #<-- REPLACE THIS LINE
    
    # log-likelihood
    NLL += [10] #<-- REPLACE THIS LINE
    
    plt.figure() 
    plt.plot(x, y, 'ko', alpha=0.3)
    plt.plot(means[:,0], means[:,1], 'oy', markersize=25)
    for k in range(K):
        rv = multivariate_normal(means[k,:], covs[k])
        plt.contour(X, Y, rv.pdf(pos), alpha = 1.0, zorder=10)
        
    plt.xlabel("$x_1$")
    plt.ylabel("$x_2$")
    plt.text(x=3.5, y=8, s="EM iteration "+str(em_iter+1))
    
    if la.norm(NLL[em_iter+1]-NLL[em_iter]) < 1e-6:
        print("Converged after iteration ", em_iter+1)
        break
   
# plot final the mixture model
plt.figure() 
gmm = 0
for k in range(3):
    mix_comp = multivariate_normal(means[k,:].ravel(), covs[k,:,:])
    gmm += weights[k]*mix_comp.pdf(pos)

plt.plot(x, y, 'ko', alpha=0.3)
plt.contour(X, Y, gmm,  alpha = 1.0, zorder=10)    
plt.xlim([-8,8]);
plt.ylim([-6,6]);
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mLinAlgError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-7-4011c4acd71c>[0m in [0;36m<module>[0;34m[0m
[1;32m     28[0m     [0mplt[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0mmeans[0m[0;34m[[0m[0;34m:[0m[0;34m,[0m[0;36m0[0m[0;34m][0m[0;34m,[0m [0mmeans[0m[0;34m[[0m[0;34m:[0m[0;34m,[0m[0;36m1[0m[0;34m][0m[0;34m,[0m [0;34m'oy'[0m[0;34m,[0m [0mmarkersize[0m[0;34m=[0m[0;36m25[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     29[0m     [0;32mfor[0m [0mk[0m [0;32min[0m [0mrange[0m[0;34m([0m[0mK[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 30[0;31m         [0mrv[0m [0;34m=[0m [0mmultivariate_normal[0m[0;34m([0m[0mmeans[0m[0;34m[[0m[0mk[0m[0;34m,[0m[0;34m:[0m[0;34m][0m[0;34m,[0m [0mcovs[0m[0;34m[[0m[0mk[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     31[0m         [0mplt[0m[0;34m.[0m[0mcontour[0m[0;34m([0m[0mX[0m[0;34m,[0m [0mY[0m[0;34m,[0m [0mrv[0m[0;34m.[0m[0mpdf[0m[0;34m([0m[0mpos[0m[0;34m)[0m[0;34m,[0m [0malpha[0m [0;34m=[0m [0;36m1.0[0m[0;34m,[0m [0mzorder[0m[0;34m=[0m[0;36m10[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     32[0m [0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.7/site-packages/scipy/stats/_multivariate.py[0m in [0;36m__call__[0;34m(self, mean, cov, allow_singular, seed)[0m
[1;32m    365[0m         return multivariate_normal_frozen(mean, cov,
[1;32m    366[0m                                           [0mallow_singular[0m[0;34m=[0m[0mallow_singular[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 367[0;31m                                           seed=seed)
[0m[1;32m    368[0m [0;34m[0m[0m
[1;32m    369[0m     [0;32mdef[0m [0m_process_parameters[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mdim[0m[0;34m,[0m [0mmean[0m[0;34m,[0m [0mcov[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.7/site-packages/scipy/stats/_multivariate.py[0m in [0;36m__init__[0;34m(self, mean, cov, allow_singular, seed, maxpts, abseps, releps)[0m
[1;32m    741[0m         self.dim, self.mean, self.cov = self._dist._process_parameters(
[1;32m    742[0m                                                             None, mean, cov)
[0;32m--> 743[0;31m         [0mself[0m[0;34m.[0m[0mcov_info[0m [0;34m=[0m [0m_PSD[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mcov[0m[0;34m,[0m [0mallow_singular[0m[0;34m=[0m[0mallow_singular[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    744[0m         [0;32mif[0m [0;32mnot[0m [0mmaxpts[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    745[0m             [0mmaxpts[0m [0;34m=[0m [0;36m1000000[0m [0;34m*[0m [0mself[0m[0;34m.[0m[0mdim[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.7/site-packages/scipy/stats/_multivariate.py[0m in [0;36m__init__[0;34m(self, M, cond, rcond, lower, check_finite, allow_singular)[0m
[1;32m    163[0m         [0md[0m [0;34m=[0m [0ms[0m[0;34m[[0m[0ms[0m [0;34m>[0m [0meps[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m    164[0m         [0;32mif[0m [0mlen[0m[0;34m([0m[0md[0m[0;34m)[0m [0;34m<[0m [0mlen[0m[0;34m([0m[0ms[0m[0;34m)[0m [0;32mand[0m [0;32mnot[0m [0mallow_singular[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 165[0;31m             [0;32mraise[0m [0mnp[0m[0;34m.[0m[0mlinalg[0m[0;34m.[0m[0mLinAlgError[0m[0;34m([0m[0;34m'singular matrix'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    166[0m         [0ms_pinv[0m [0;34m=[0m [0m_pinv_1d[0m[0;34m([0m[0ms[0m[0;34m,[0m [0meps[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    167[0m         [0mU[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mmultiply[0m[0;34m([0m[0mu[0m[0;34m,[0m [0mnp[0m[0;34m.[0m[0msqrt[0m[0;34m([0m[0ms_pinv[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mLinAlgError[0m: singular matrix
LinAlgError: singular matrix


Container exited with status: {'Error': None, 'StatusCode': 1}
