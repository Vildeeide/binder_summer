[I 200708 06:07:55 inrepo:36] Testing notebook trials/2_classification.ipynb
[I 200708 06:07:55 inrepo:45] Found kernel python3
[I 200708 06:07:56 execute:404] Executing notebook with kernel: python3
Traceback (most recent call last):
  File "/src/inrepo.py", line 112, in <module>
    main()
  File "/src/inrepo.py", line 108, in main
    test_f(opts.test, opts.output_dir)
  File "/src/inrepo.py", line 74, in run_notebook
    exported = executenb(nb, cwd=os.path.dirname(nb_path), kernel_name=kernel_name)
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 737, in executenb
    return ep.preprocess(nb, resources, km=km)[0]
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 405, in preprocess
    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/base.py", line 69, in preprocess
    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 448, in preprocess_cell
    raise CellExecutionError.from_cell_and_msg(cell, out)
nbconvert.preprocessors.execute.CellExecutionError: An error occurred while executing the following cell:
------------------
def mnist(a, b, N):
    """Prepare data for binary classification of MNIST."""
    folder = os.path.join('..', 'data')
    mnist = datasets.fetch_mldata('MNIST original', data_home=folder)

    assert N < min(sum(mnist.target==a), sum(mnist.target==b))
    M = mnist.data.shape[1]
    
    X = np.empty((M, 2, N))
    X[:,0,:] = mnist.data[mnist.target==a,:][:N,:].T
    X[:,1,:] = mnist.data[mnist.target==b,:][:N,:].T
    
    y = np.empty((2, N))
    y[0,:] = -1
    y[1,:] = +1

    X.shape = M, 2*N
    y.shape = 2*N, 1
    return X, y

X, y = mnist(4, 9, 1000)

print('Dimensionality: N={} samples, M={} features'.format(X.shape[1], X.shape[0]))

X -= 127.5
print('X in [{}, {}]'.format(np.min(X), np.max(X)))

def plot_digit(nn):
    M, N = X.shape
    m = int(np.sqrt(M))
    fig, axes = plt.subplots(1,len(nn), figsize=(15,5))
    for i, n in enumerate(nn):
        n = int(n)
        img = X[:,n]
        axes[i].imshow(img.reshape((m,m)))
        axes[i].set_title('Label: y = {:.0f}'.format(y[n,0]))

plot_digit([0, 1, 1e2, 1e2+1, 1e3, 1e3+1])
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
[0;32m<ipython-input-2-91d251454ba4>[0m in [0;36m<module>[0;34m[0m
[1;32m     19[0m     [0;32mreturn[0m [0mX[0m[0;34m,[0m [0my[0m[0;34m[0m[0;34m[0m[0m
[1;32m     20[0m [0;34m[0m[0m
[0;32m---> 21[0;31m [0mX[0m[0;34m,[0m [0my[0m [0;34m=[0m [0mmnist[0m[0;34m([0m[0;36m4[0m[0;34m,[0m [0;36m9[0m[0;34m,[0m [0;36m1000[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     22[0m [0;34m[0m[0m
[1;32m     23[0m [0mprint[0m[0;34m([0m[0;34m'Dimensionality: N={} samples, M={} features'[0m[0;34m.[0m[0mformat[0m[0;34m([0m[0mX[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0;36m1[0m[0;34m][0m[0;34m,[0m [0mX[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m<ipython-input-2-91d251454ba4>[0m in [0;36mmnist[0;34m(a, b, N)[0m
[1;32m      2[0m     [0;34m"""Prepare data for binary classification of MNIST."""[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m     [0mfolder[0m [0;34m=[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0mjoin[0m[0;34m([0m[0;34m'..'[0m[0;34m,[0m [0;34m'data'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 4[0;31m     [0mmnist[0m [0;34m=[0m [0mdatasets[0m[0;34m.[0m[0mfetch_mldata[0m[0;34m([0m[0;34m'MNIST original'[0m[0;34m,[0m [0mdata_home[0m[0;34m=[0m[0mfolder[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0;34m[0m[0m
[1;32m      6[0m     [0;32massert[0m [0mN[0m [0;34m<[0m [0mmin[0m[0;34m([0m[0msum[0m[0;34m([0m[0mmnist[0m[0;34m.[0m[0mtarget[0m[0;34m==[0m[0ma[0m[0;34m)[0m[0;34m,[0m [0msum[0m[0;34m([0m[0mmnist[0m[0;34m.[0m[0mtarget[0m[0;34m==[0m[0mb[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mAttributeError[0m: module 'sklearn.datasets' has no attribute 'fetch_mldata'
AttributeError: module 'sklearn.datasets' has no attribute 'fetch_mldata'


Container exited with status: {'Error': None, 'StatusCode': 1}
