[I 200703 06:58:44 inrepo:35] Testing notebook docs/sources/user_guide/plotting/plot_linear_regression.ipynb
[I 200703 06:58:45 execute:404] Executing notebook with kernel: python3
Traceback (most recent call last):
  File "/src/inrepo.py", line 76, in <module>
    main()
  File "/src/inrepo.py", line 72, in main
    test_f(opts.test, opts.output_dir)
  File "/src/inrepo.py", line 38, in run_notebook
    exported = executenb(nb, cwd=os.path.dirname(nb_path))
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 737, in executenb
    return ep.preprocess(nb, resources, km=km)[0]
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 405, in preprocess
    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/base.py", line 69, in preprocess
    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)
  File "/srv/conda/envs/notebook/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py", line 448, in preprocess_cell
    raise CellExecutionError.from_cell_and_msg(cell, out)
nbconvert.preprocessors.execute.CellExecutionError: An error occurred while executing the following cell:
------------------
import matplotlib.pyplot as plt
from mlxtend.plotting import plot_linear_regression
import numpy as np

X = np.array([4, 8, 13, 26, 31, 10, 8, 30, 18, 12, 20, 5, 28, 18, 6, 31, 12,
   12, 27, 11, 6, 14, 25, 7, 13,4, 15, 21, 15])

y = np.array([14, 24, 22, 59, 66, 25, 18, 60, 39, 32, 53, 18, 55, 41, 28, 61, 35,
   36, 52, 23, 19, 25, 73, 16, 32, 14, 31, 43, 34])

intercept, slope, corr_coeff = plot_linear_regression(X, y)
plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m<ipython-input-2-4d63aa5b452b>[0m in [0;36m<module>[0;34m[0m
[1;32m      9[0m    36, 52, 23, 19, 25, 73, 16, 32, 14, 31, 43, 34])
[1;32m     10[0m [0;34m[0m[0m
[0;32m---> 11[0;31m [0mintercept[0m[0;34m,[0m [0mslope[0m[0;34m,[0m [0mcorr_coeff[0m [0;34m=[0m [0mplot_linear_regression[0m[0;34m([0m[0mX[0m[0;34m,[0m [0my[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     12[0m [0mplt[0m[0;34m.[0m[0mshow[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.7/site-packages/mlxtend/plotting/plot_linear_regression.py[0m in [0;36mplot_linear_regression[0;34m(X, y, model, corr_func, scattercolor, fit_style, legend, xlim)[0m
[1;32m     75[0m         [0mx_min[0m[0;34m,[0m [0mx_max[0m [0;34m=[0m [0mxlim[0m[0;34m[0m[0;34m[0m[0m
[1;32m     76[0m [0;34m[0m[0m
[0;32m---> 77[0;31m     [0my_min[0m [0;34m=[0m [0mmodel[0m[0;34m.[0m[0mpredict[0m[0;34m([0m[0mx_min[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     78[0m     [0my_max[0m [0;34m=[0m [0mmodel[0m[0;34m.[0m[0mpredict[0m[0;34m([0m[0mx_max[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     79[0m [0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.7/site-packages/sklearn/linear_model/_base.py[0m in [0;36mpredict[0;34m(self, X)[0m
[1;32m    234[0m             [0mReturns[0m [0mpredicted[0m [0mvalues[0m[0;34m.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    235[0m         """
[0;32m--> 236[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_decision_function[0m[0;34m([0m[0mX[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    237[0m [0;34m[0m[0m
[1;32m    238[0m     [0m_preprocess_data[0m [0;34m=[0m [0mstaticmethod[0m[0;34m([0m[0m_preprocess_data[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.7/site-packages/sklearn/linear_model/_base.py[0m in [0;36m_decision_function[0;34m(self, X)[0m
[1;32m    216[0m         [0mcheck_is_fitted[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    217[0m [0;34m[0m[0m
[0;32m--> 218[0;31m         [0mX[0m [0;34m=[0m [0mcheck_array[0m[0;34m([0m[0mX[0m[0;34m,[0m [0maccept_sparse[0m[0;34m=[0m[0;34m[[0m[0;34m'csr'[0m[0;34m,[0m [0;34m'csc'[0m[0;34m,[0m [0;34m'coo'[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    219[0m         return safe_sparse_dot(X, self.coef_.T,
[1;32m    220[0m                                dense_output=True) + self.intercept_

[0;32m/srv/conda/envs/notebook/lib/python3.7/site-packages/sklearn/utils/validation.py[0m in [0;36minner_f[0;34m(*args, **kwargs)[0m
[1;32m     71[0m                           FutureWarning)
[1;32m     72[0m         [0mkwargs[0m[0;34m.[0m[0mupdate[0m[0;34m([0m[0;34m{[0m[0mk[0m[0;34m:[0m [0marg[0m [0;32mfor[0m [0mk[0m[0;34m,[0m [0marg[0m [0;32min[0m [0mzip[0m[0;34m([0m[0msig[0m[0;34m.[0m[0mparameters[0m[0;34m,[0m [0margs[0m[0;34m)[0m[0;34m}[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 73[0;31m         [0;32mreturn[0m [0mf[0m[0;34m([0m[0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     74[0m     [0;32mreturn[0m [0minner_f[0m[0;34m[0m[0;34m[0m[0m
[1;32m     75[0m [0;34m[0m[0m

[0;32m/srv/conda/envs/notebook/lib/python3.7/site-packages/sklearn/utils/validation.py[0m in [0;36mcheck_array[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)[0m
[1;32m    615[0m                     [0;34m"Reshape your data either using array.reshape(-1, 1) if "[0m[0;34m[0m[0;34m[0m[0m
[1;32m    616[0m                     [0;34m"your data has a single feature or array.reshape(1, -1) "[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 617[0;31m                     "if it contains a single sample.".format(array))
[0m[1;32m    618[0m             [0;31m# If input is 1D raise error[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    619[0m             [0;32mif[0m [0marray[0m[0;34m.[0m[0mndim[0m [0;34m==[0m [0;36m1[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mValueError[0m: Expected 2D array, got scalar array instead:
array=3.2.
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.
ValueError: Expected 2D array, got scalar array instead:
array=3.2.
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.


Container exited with status: {'Error': None, 'StatusCode': 1}
